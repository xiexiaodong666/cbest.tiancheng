<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welfare.persist.mapper.AccountConsumeSceneCustomizeMapper">


  <sql id="tableName">
        account_consume_scene
    </sql>

  <sql id="baseColumn">
        id,mer_code,account_type_code,remark,create_user,create_time,update_user,update_time,flag,version
    </sql>
  <sql id="baseMapColumn">
    acs.id,
	acs.mer_code AS merCode,
	acs.account_type_code AS accountTypeCode,
	acs.remark,
	acs.STATUS as status,
	acs.create_time AS createTime,
	acs.deleted,
	acs.create_user as createUser,
	acs.update_user as updateUser,
	acs.update_time as updateTime,
	acs.version
  </sql>
  <sql id="pageAndExport">
     SELECT
    GROUP_CONCAT( CONCAT( msr.store_alias, "-", msr.store_code ) ) AS storeInfo,
    act.type_name AS accountTypeName,
    acs.id,
    acs.STATUS,
    case acs.STATUS
		when 1 then '正常'
		when 2 then '禁用'
		end as statusString,
    acs.create_time AS createTime,
    acs.remark,
    acs.mer_code as merCode
    FROM
    account_consume_scene acs
    inner join account_consume_scene_store_relation acstr on acs.id = acstr.account_consume_scene_id
    inner JOIN merchant_store_relation msr ON acstr.store_code = msr.store_code
    AND acs.mer_code = msr.mer_code
    inner JOIN account_type act ON act.type_code = acs.account_type_code and act.mer_code = acs.mer_code
    where acs.deleted =0 and acstr.deleted= 0 and msr.deleted = 0
    and acs.mer_code = act.mer_code and acs.mer_code = msr.mer_code
  </sql>




  <select id="getPageDTO" resultType="com.welfare.persist.dto.AccountConsumeScenePageDTO">
    SELECT
    GROUP_CONCAT(
    DISTINCT(CONCAT(
    msr.store_alias,
    "-",
    msr.store_code
    ))
    ) AS storeInfo,
    act.type_name AS accountTypeName,
    acs.id,
    acs.STATUS,
    case acs.STATUS
    when 1 then '正常'
    when 2 then '禁用'
    end as statusString,
    acs.create_time AS createTime,
    acs.remark,
    acs.mer_code as merCode
    FROM
    account_consume_scene acs
    INNER JOIN account_type act ON act.type_code = acs.account_type_code and  acs.mer_code = act.mer_code
    INNER JOIN account_consume_scene_store_relation acstr ON acs.id = acstr.account_consume_scene_id
    INNER JOIN merchant_store_relation msr ON acstr.store_code = msr.store_code AND acs.mer_code = msr.mer_code
    WHERE
    acs.deleted = 0
    AND acstr.deleted = 0
    <if test=" merCode !='' and merCode != null ">
      and acs.mer_code = #{merCode}
    </if>
    <if test="accountTypeName != ''  and accountTypeName != null ">
      and act.type_name like '${accountTypeName}%'
    </if>
    <if test="status != null ">
      and acs.status = #{status}
    </if>
    <if test="createTimeStart != null ">
      and acs.create_time <![CDATA[>=]]> #{createTimeStart}
    </if>
    <if test="createTimeEnd != null ">
      and acs.create_time <![CDATA[<=]]> #{createTimeEnd}
    </if>
    GROUP BY acs.id
    order by acs.create_time desc
  </select>


  <resultMap type="com.welfare.persist.dto.AccountConsumeSceneMapperDTO" id="detailMap">
    <id property="id" column="id"/>
    <result property="merCode" column="merCode"/>
    <result property="accountTypeCode" column="accountTypeCode"/>
    <result property="accountTypeName" column="accountTypeName"/>
    <result property="remark" column="remark"/>
    <result property="status" column="STATUS"/>
    <result property="createTime" column="createTime"/>
    <result property="deleted" column="deleted"/>
    <collection property="accountConsumeStoreRelationDTOListDTOList"
      ofType="com.welfare.persist.dto.AccountConsumeStoreRelationDTO">
      <id property="id" column="acstrId"/>
      <result property="storeCode" column="storeCode"/>
      <result property="storeName" column="storeName"/>
      <result property="consumType" column="consumType"/>
      <result property="sceneConsumType" column="sceneConsumType"/>
    </collection>
  </resultMap>


  <select id="queryAccountConsumerScene4Detail"
    resultMap="detailMap">
		SELECT
	acs.id,
	acs.mer_code AS merCode,
	acs.account_type_code AS accountTypeCode,
	act.type_name AS accountTypeName,
	acs.remark,
	acs.STATUS as status,
	acs.create_time AS createTime,
	acs.deleted,
	acstr.id as acstrId,
	acstr.store_code AS storeCode,
	msr.store_alias AS storeName,
	msr.consum_type AS consumType,
	acstr.scene_consum_type AS sceneConsumType,
	acs.create_time as createTime
FROM
	account_consume_scene acs
	inner JOIN account_consume_scene_store_relation acstr ON acs.id = acstr.account_consume_scene_id
	inner JOIN merchant_store_relation msr ON acstr.store_code = msr.store_code
	inner JOIN account_type act ON act.type_code = acs.account_type_code and acs.mer_code = act.mer_code
WHERE
	acs.id = #{id} and acstr.deleted = 0
	</select>


  <select id="queryById"
    resultType="com.welfare.persist.entity.AccountConsumeScene">
    SELECT
	acs.id,
	acs.mer_code AS merCode,
	acs.account_type_code AS accountTypeCode,
	acs.remark,
	acs.STATUS as status,
	acs.create_time AS createTime,
	acs.deleted,
	acs.create_user as createUser,
	acs.update_user as updateUser,
	acs.update_time as updateTime,
	acs.version
	FROM
	account_consume_scene acs
	WHERE
	acs.id = #{id}
  </select>

  <select id="queryByIdList"
    resultType="com.welfare.persist.entity.AccountConsumeScene">
    SELECT
      acs.id,
      acs.mer_code AS merCode,
      acs.account_type_code AS accountTypeCode,
      acs.remark,
      acs.STATUS as status,
      acs.create_time AS createTime,
      acs.deleted,
      acs.create_user as createUser,
      acs.update_user as updateUser,
      acs.update_time as updateTime,
      acs.version
    FROM
      account_consume_scene acs
    WHERE
      acs.id in
    <foreach collection="idList" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>



  <select id="getCountByMerCodeAndAccountTypeAndStoreCode" resultType="Integer">
    SELECT
	count( 1 )
FROM
	account_consume_scene acs
	LEFT JOIN account_consume_scene_store_relation acssr ON acs.id = acssr.account_consume_scene_id
WHERE
	acs.mer_code = #{merCode}
	AND acssr.store_code = #{typeCode}
	AND acs.account_type_code = #{storeCode}
  </select>

  <select id="queryDeleteScene" resultType="com.welfare.persist.entity.AccountConsumeScene">
    select
    DISTINCT(acs.id) as bsId,
    <include refid="baseMapColumn"/>
    from  account_consume_scene acs
    left join account_consume_scene_store_relation relation on relation.account_consume_scene_id = acs.id
    where acs.mer_code= #{merCode}
  </select>


  <select id="queryDeleteSceneByMerCodeAndStoreCodeList" resultType="com.welfare.persist.entity.AccountConsumeScene">
    select
    DISTINCT(acs.id) as bsId,
    <include refid="baseMapColumn"/>
    from  account_consume_scene acs
    left join account_consume_scene_store_relation relation on relation.account_consume_scene_id = acs.id
    where acs.mer_code= #{merCode}
    and relation.store_code in
    <foreach collection="storeCodeList" item="id" index="index" open="(" close=")" separator=",">
    #{id}
    </foreach>
  </select>

  <select id = "queryDeleteConsumeIdList" resultType="java.lang.Long">
    select
      acs.id as bsId
    from  account_consume_scene acs
            left join account_consume_scene_store_relation relation on relation.account_consume_scene_id = acs.id
    where acs.mer_code= #{merCode}
    group by bsId
    HAVING count(if(relation.deleted = 0,1,null)) = 0
  </select>


    <select id="findAllAccountConsumeSceneDTO" resultType="com.welfare.persist.dto.AccountConsumeStoreInfoDTO">
        SELECT
            acs.id,
            acs.mer_code AS merCode,
            acs.account_type_code AS accountTypeCode,
            act.type_name AS accountTypeName,
            acstr.store_code AS storeCode,
            msr.store_alias AS storeName,
            msr.consum_type AS consumType,
            acstr.scene_consum_type AS sceneConsumType,
            m.mer_code as supplierCode,
            m.mer_name as supplierName
        FROM
            account_consume_scene acs
                inner JOIN account_consume_scene_store_relation acstr ON acs.id = acstr.account_consume_scene_id
                inner JOIN merchant_store_relation msr ON acstr.store_code = msr.store_code and acs.mer_code = msr.mer_code
                inner JOIN account_type act ON act.type_code = acs.account_type_code and act.mer_code = acs.mer_code
                inner JOIN supplier_store sp ON sp.store_code = acstr.store_code
                inner JOIN merchant m ON m.mer_code = sp.mer_code
        WHERE
            acs.mer_code = #{merCode} and acstr.deleted = 0 and acs.deleted = 0 and msr.deleted = 0
    </select>


  <select id="findAllAccountWelfareConsumeSceneDTO" resultType="com.welfare.persist.dto.AccountConsumeStoreInfoDTO">
        SELECT
            acs.id,
            acs.mer_code AS merCode,
            acs.mer_account_type_code AS accountWelfareCode,
            mat.mer_account_type_name AS accountWelfareName,
            acs.store_code AS storeCode,
            msr.store_alias AS storeName,
            msr.consum_type AS consumType,
            acs.scene_consume_type AS sceneConsumType,
            m.mer_code as supplierCode,
            m.mer_name as supplierName
        FROM
            mer_account_type_consume_scene_config acs
                inner JOIN merchant_store_relation msr ON acs.store_code = msr.store_code and  acs.mer_code = msr.mer_code
                inner JOIN merchant_account_type mat ON mat.mer_account_type_code = acs.mer_account_type_code and mat.mer_code = acs.mer_code
                inner JOIN supplier_store sp ON sp.store_code = acs.store_code
                inner JOIN merchant m ON m.mer_code = sp.mer_code
        WHERE
            acs.mer_code = #{merCode}  and acs.deleted = 0 and msr.deleted = 0
    </select>
</mapper>