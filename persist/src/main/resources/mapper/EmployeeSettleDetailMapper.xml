<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welfare.persist.mapper.EmployeeSettleDetailMapper">
    <sql id="tableName">
        employee_settle_detail
    </sql>

    <sql id="baseColumn">
        id,settle_no,order_id,trans_no,account_code,account_name,card_id,mer_code,mer_name,store_code,store_name,trans_time,pos,pay_code,pay_name,trans_type,trans_type_name,trans_amount,mer_account_type,mer_account_type_name,account_amount,account_balance,mer_deduction_amount,mer_credit_deduction_amount,settle_flag,order_channel,create_user,create_time,update_user,update_time,version,mer_credit,mer_balance,store_type,account_deduction_amount_id
    </sql>

    <select id="getFromAccountDetail" parameterType="Map" resultType="com.welfare.persist.entity.EmployeeSettleDetail">
        select
        t1.id as accountDeductionAmountId,
        oi.order_id as orderId,
        t1.trans_no as transNo,
        t1.account_code as accountCode,
        t2.account_name as accountName,
        t1.card_id as cardId,
        t3.mer_code as merCode,
        t3.mer_name as merName,
        t1.store_code as storeCode,
        t4.store_alias as storeName,
        t1.trans_time as transTime,
        t1.pos as pos,
        t1.pay_code as payCode,
        '员工卡支付' as payName,
        t1.trans_type as transType,
        case when t1.trans_type='consume' then '消费'
        when t1.trans_type='refund' then '退款' end as transTypeName,
        t1.trans_amount as transAmount,
        t1.mer_account_type as merAccountType,
        t5.mer_account_type_name as merAccountTypeName,
        t1.account_deduction_amount as accountAmount,
        t1.account_amount_type_balance as accountBalance,
        t1.mer_deduction_amount as merDeductionAmount,
        t1.mer_deduction_credit_amount as merCreditDeductionAmount,
        t1.order_channel as orderChannel,
        'unsettled' as settleFlag,
        'system' as create_user,
        case when t2.mer_code = ss.mer_code then 'self'
        else 'third' end as storeType
        from account_deduction_detail t1
        left join account t2 on t1.account_code=t2.account_code
        left join merchant t3 on t2.mer_code=t3.mer_code
        left join merchant_store_relation t4 on t1.store_code = t4.store_code and t2.mer_code=t4.mer_code and t4.deleted=0
        left join merchant_account_type t5 on t2.mer_code = t5.mer_code and t1.mer_account_type=t5.mer_account_type_code
        left join order_info oi on oi.trans_no = t1.trans_no
        left join supplier_store ss on ss.store_code = t1.store_code
        <where>
            <if test="minId!=null">
                t1.id &gt;=#{minId}
            </if>
            <if test="startTime!=null">
                and t1.trans_time &gt;=#{startTime,jdbcType=TIMESTAMP}
            </if>
            <if test="endTime!=null">
                and t1.trans_time &lt;=#{endTime,jdbcType=TIMESTAMP}
            </if>
            and t1.trans_type in('consume','refund')
            and t1.mer_account_type in ('surplus_quota','surplus_quota_overpay')
        </where>
        order by t1.id
        <if test="limit!=null">
            limit ${limit}
        </if>
    </select>

    <sql id="getEmployeeSettleConsumeWhere">
        <if test="query.accountName!=null and query.accountName!=''">
            and a.account_name like concat('%',#{query.accountName},'%')
        </if>
        <if test="query.phone!=null and query.phone!=''">
            and a.phone =#{query.phone}
        </if>
        <if test="query.departmentCode!=null and query.departmentCode!=''">
            and a.store_code=#{query.departmentCode}
        </if>
        <if test="query.settleFlag!=null and query.settleFlag!=''">
            and esd.settle_flag=#{query.settleFlag}
        </if>
        <if test="query.startTime!=null">
            and esd.trans_time <![CDATA[ >= ]]> #{query.startTime}
        </if>
        <if test="query.endTime!=null">
            and esd.trans_time <![CDATA[ <= ]]> #{query.endTime}
        </if>
    </sql>

    <sql id="employeeSettleDetailQuery">
        <if test="query.accountCode!=null and query.accountCode!=''">
            and esd.account_code = #{query.accountCode}
        </if>
        <if test="query.orderId!=null and query.orderId!=''">
            and esd.order_id like concat('%',#{query.orderId},'%')
        </if>
        <if test="query.transNo!=null and query.transNo!=''">
            and esd.trans_no like concat('%',#{query.transNo},'%')
        </if>
        <if test="query.storeType!=null and query.storeType!=''">
            and esd.store_type =#{query.storeType}
        </if>
        <if test="query.storeCode!=null and query.storeCode!=''">
            and esd.store_code=#{query.storeCode}
        </if>
        <if test="query.merAccountType!=null and query.merAccountType!=''">
            and esd.mer_account_type=#{query.merAccountType}
        </if>
        <if test="query.transTimeStart!=null">
            and esd.trans_time <![CDATA[ >= ]]> #{query.transTimeStart}
        </if>
        <if test="query.transTimeEnd!=null">
            and esd.trans_time <![CDATA[ <= ]]> #{query.transTimeEnd}
        </if>
        <if test="query.settleNo!=null and query.settleNo!=''">
            and esd.settle_no = #{query.settleNo}
        </if>
        <if test="query.settleFlag!=null and query.settleFlag!=''">
            and esd.settle_flag = #{query.settleFlag}
        </if>
        <if test="query.minId!=null">
            and esd.id <![CDATA[ >= ]]> #{query.minId}
        </if>
    </sql>

    <sql id="employeeSettleSum">
        sum(case when esd.store_type ='self'  then esd.trans_amount else 0 end) as selfConsumerAmount,
        sum(case when esd.store_type ='third'  then esd.trans_amount else 0 end) as thirdConsumerAmount,
        sum(esd.trans_amount) as totalConsumerAmount
    </sql>

    <select id="getEmployeeSettleConsumeList" resultType="com.welfare.persist.dto.EmployeeSettleConsumeDTO">
        select
        esd.account_code as accountCode,
        a.account_name as accountName,
        a.phone as phone,
        d.department_name as departmentName,
        CONCAT(a.surplus_quota + a.surplus_quota_overpay, '/',a.max_quota) as quota,
        count(esd.trans_amount) as orderNum,
        <include refid="employeeSettleSum"></include>
        from employee_settle_detail esd left join account a on esd.account_code = a.account_code
        left join department d on a.store_code = d.department_code
        where 1 = 1
        <include refid="getEmployeeSettleConsumeWhere"/>
        group by esd.account_code
    </select>

    <select id="getEmployeeSettleConsumeSum" resultType="com.welfare.persist.dto.EmployeeSettleSumDTO">
        select
        <include refid="employeeSettleSum"></include>
        where 1=1
        <include refid="getEmployeeSettleConsumeWhere"/>

    </select>

    <select id="getEmployeeSettleDetailSum" resultType="com.welfare.persist.dto.EmployeeSettleSumDTO">
        select
        <include refid="employeeSettleSum"></include>
        where 1=1
        <include refid="employeeSettleDetailQuery"></include>
    </select>
    <select id="querySettleDetail" resultType="com.welfare.persist.dto.EmployeeSettleDetailDTO">
        select esd.id id,
               esd.trans_no transNo,
               esd.order_id orderId,
               esd.trans_time transTime,
               esd.mer_account_type_name merAccountType,
               a.account_name accountName,
               a.phone phone,
               a.store_code departmentCode,
               d.department_name departmentName,
               esd.store_code storeCode,
               esd.store_name storeName,
               case when esd.store_type = 'self' then '自营'
                    when esd.store_type = 'third' then '第三方' end as storeType,
               esd.trans_amount transAmount,
               if(esd.mer_account_type = 'surplus_quota_overpay' and esd.trans_type = 'refund', 0, esd.trans_amount) as settleAmount,
               case when esd.settle_flag = 'unsettled' then '待结算'
                    when esd.settle_flag = 'settling' then '结算中'
                    when esd.settle_flag = 'settled' then '已结算' end as settleFlag
        from employee_settle_detail esd
        left join account a on esd.account_code = a.account_code
        left join department d on a.store_code=d.department_code
        where 1=1
        <include refid="employeeSettleDetailQuery"/>
        <if test="query.limit!=null and query.minId!=null">
            order by esd.id
            limit #{query.limit}
        </if>

        <if test="query.limit==null and query.minId==null">
            order by esd.trans_time desc
        </if>

    </select>

</mapper>
