<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.welfare.persist.mapper.OrderInfoMapper">

    <select id="getCommodityOfflineOrderTotal"
      parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderTotalRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderTotalResponse">
        SELECT
        a.transAmountTotal AS goodsId,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        SUM( a.transAmountTotal ) AS sales,
        COUNT( trans_no ) AS saleCount,
        COUNT( DISTINCT a.account_code ) AS salePeopleCount
        FROM
        (
        SELECT
        trans_no,
        ab.account_code,
        sum( trans_amount ) AS transAmountTotal,
        ab.trans_type
        FROM
        account_bill_detail ab
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type at ON at.type_code = ac.account_type_code and ac.mer_code = at.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>
            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        trans_no
        ) a
        <where>
            <if test="request.goodsName != null">
                and CONCAT( a.transAmountTotal, '元商品' ) like concat('%',#{request.goodsName},'%')
            </if>
        </where>

        GROUP BY
        a.transAmountTotal,a.trans_type
    </select>


    <select id="exportCommodityOfflineOrderTotal"
      parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderTotalRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderTotalResponse">
        SELECT
        a.transAmountTotal AS goodsId,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        SUM( a.transAmountTotal ) AS sales,
        COUNT( trans_no ) AS saleCount,
        COUNT( DISTINCT a.account_code ) AS salePeopleCount
        FROM
        (
        SELECT
        trans_no,
        ab.account_code,
        sum( trans_amount ) AS transAmountTotal,
        ab.trans_type
        FROM
        account_bill_detail ab
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type at ON at.type_code = ac.account_type_code and ac.mer_code = at.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>

            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        trans_no
        ) a
        <where>
            <if test="request.goodsName != null">
                and CONCAT( a.transAmountTotal, '元商品' ) like concat('%',#{request.goodsName},'%')
            </if>
        </where>
        GROUP BY
        a.transAmountTotal,a.trans_type
    </select>



    <select id="getCommodityOfflineOrderTotalExt"
      parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderTotalRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderBasicExtResponse">
        select sum(sales) as salesTotal ,
        sum(saleCount) as saleTotalCount,
        sum(salePeopleCount) as  saleTotalPeopleCount
        from(
        SELECT
        a.transAmountTotal AS goodsId,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        SUM( a.transAmountTotal ) AS sales,
        COUNT( trans_no ) AS saleCount,
        COUNT( DISTINCT a.account_code ) AS salePeopleCount
        FROM
        (
        SELECT
        trans_no,
        ab.account_code,
        sum( trans_amount ) AS transAmountTotal,
        ab.trans_type
        FROM
        account_bill_detail ab
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type at ON at.type_code = ac.account_type_code and ac.mer_code = at.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>

            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        trans_no
        ) a
        <where>
            <if test="request.goodsName != null">
                and CONCAT( a.transAmountTotal, '元商品' ) like concat('%',#{request.goodsName},'%')
            </if>
        </where>
        GROUP BY
        a.transAmountTotal,a.trans_type) t
    </select>



    <select id="getCommodityOfflineOrderDetail" parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderDetailRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderDetailResponse">

        SELECT
        '已完成' as orderStatus,
        1 as saleCount,
        a.order_id as orderId,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        a.account_Name as accountName,
        a.transAmountTotal as sales,
        a.phone,
        a.department_name as departmentName,
        a.trans_time as consumeTime
        FROM
        (
        SELECT
        sum( trans_amount ) AS transAmountTotal,
        ac.account_Name,
        ab.trans_time,
        oi.order_id,
        ac.phone,
        d.department_name
        FROM
        account_bill_detail ab
        LEFT JOIN order_info oi ON oi.trans_no = ab.trans_no
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type AT ON AT.type_code = ac.account_type_code
        AND ac.mer_code = AT.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>

            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        ab.trans_no,ab.trans_type
        ) a
        <where>
            <if test="request.goodsId">
                and a.transAmountTotal = #{request.goodsId}
            </if>
        </where>
    </select>

    <select id="exportCommodityOfflineOrderDetail" parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderDetailRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderDetailResponse">

        SELECT
        '已完成' as orderStatus,
        1 as saleCount,
        a.order_id as orderId,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        a.account_Name as accountName,
        a.transAmountTotal as sales,
        a.phone,
        a.department_name as departmentName,
        a.trans_time as consumeTime
        FROM
        (
        SELECT
        sum( trans_amount ) AS transAmountTotal,
        ac.account_Name,
        ab.trans_time,
        oi.order_id,
        ac.phone,
        d.department_name
        FROM
        account_bill_detail ab
        LEFT JOIN order_info oi ON oi.trans_no = ab.trans_no
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type AT ON AT.type_code = ac.account_type_code
        AND ac.mer_code = AT.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>

            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        ab.trans_no,ab.trans_type
        ) a
        <where>
            <if test="request.goodsId">
                and a.transAmountTotal = #{request.goodsId}
            </if>
        </where>
    </select>

    <select id="getCommodityOfflineOrderDetailExt" parameterType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderDetailRequest"
      resultType="com.welfare.persist.dto.commodityOfflineOrder.CommodityOfflineOrderBasicExtResponse">
        SELECT
        sum( t.transAmountTotal ) AS salesTotal,
        sum( t.saleCount ) AS saleTotalCount,
        count( DISTINCT t.account_code ) AS saleTotalPeopleCount from (
        SELECT
        '已完成' as orderStatus,
        1 as saleCount,
        a.order_id,
        a.trans_time,
        CONCAT( a.transAmountTotal, '元商品' ) AS goodsName,
        a.account_Name,
        a.transAmountTotal,
        a.phone,
        a.department_name,
        a.account_code

        FROM
        (
        SELECT
        sum( trans_amount ) AS transAmountTotal,
        ac.account_Name,
        ab.trans_time,
        oi.order_id,
        ac.phone,
        d.department_name,
        ab.account_code

        FROM
        account_bill_detail ab
        LEFT JOIN order_info oi ON oi.trans_no = ab.trans_no
        LEFT JOIN supplier_store s ON ab.store_code = s.store_code
        LEFT JOIN merchant m ON s.mer_code = m.mer_code
        LEFT JOIN account ac ON ac.account_code = ab.account_code
        LEFT JOIN department d ON ac.department = d.department_code
        LEFT JOIN account_type AT ON AT.type_code = ac.account_type_code
        AND ac.mer_code = AT.mer_code
        <where>
            ab.order_channel = 'SHOP_CONSUMPTION'
            and
            ab.trans_type = 'consume'
            <if test="request.merCode != null">
                and ac.mer_code = #{request.merCode}
            </if>

            <if test="request.filterDateStart != null">
                and ab.trans_time &gt;= #{request.filterDateStart}
            </if>
            <if test="request.filterDateEnd != null">
                and ab.trans_time &lt;= #{request.filterDateEnd}
            </if>

            <if test="request.storeCode != null">
                AND ab.store_code = #{request.storeCode}
            </if>
            <if test="request.departmentPathList != null and request.departmentPathList.size() > 0">
                and
                <foreach collection="request.departmentPathList" item="item" index="index" open="("
                  close=")"
                  separator="or">
                    d.department_path like '${item}%'
                </foreach>
            </if>
            <if test="request.accountTypeCodes != null and request.accountTypeCodes.size()>0">
                and at.type_code in
                <foreach collection="request.accountTypeCodes" item="item" open="(" close=")" separator=",">
                    #{item}
                </foreach>
            </if>
        </where>
        GROUP BY
        ab.trans_no,ab.trans_type
        ) a
        <where>
            <if test="request.goodsId">
                and a.transAmountTotal = #{request.goodsId}
            </if>
        </where>
        )t
    </select>









    <select id="searchOrder" parameterType="com.welfare.persist.dto.query.OrderPageQuery" resultType="com.welfare.persist.dto.OrderInfoDTO">
        select  mm.mer_name as accountMerName, tt.orderId ,
        tt.accountMerCode,tt.merchantName,tt.accountCode,
        tt.accountName,tt.merchantCode,tt.storeCode,tt.storeName,
        tt.orderTime,tt.cardId,trans_type, phone,tt.paymentChannel,
        case time_interval
        when 1 then "早餐"
        when 2 then "午餐"
        when 3 then "晚餐"
        when 4 then "宵夜"
        else time_interval end as time_interval,
        tt.type_code , tt.type_code as accountType ,tt.type_name as accountTypeName , tt.department_code , tt.department_name as departmentName,
        case trans_type
        when "consume" then orderAmount
        else  (-1) * orderAmount
        end
        as orderAmount, phone from (
        SELECT
        oi.order_id as orderId,
        t.phone as phone,
        t.mer_code as accountMerCode,
        t.account_code as accountCode,
        t.account_name as accountName,
        s.mer_code AS merchantCode,
        m.mer_name AS merchantName,
        s.store_code as storeCode,
        s.store_name as storeName,
        ab.trans_amount as orderAmount,
        ab.trans_time as orderTime,
        ab.card_id as cardId,
        ab.trans_type,
        oi.time_interval,
        t.account_type_code,
        d.department_code,
        d.department_name ,
        aty.type_code,
        aty.type_name,
        ab.payment_channel as paymentChannel
        FROM
        (select account_code,sum(trans_amount) as trans_amount , trans_no ,payment_channel,
        max(trans_time) as trans_time ,store_code,trans_type,max(card_id) as card_id
        from account_bill_detail
        where trans_type in ('consume','refund')
        and order_channel = "SHOP_CONSUMPTION"
        group by trans_no , store_code , trans_type,account_code) ab
        LEFT JOIN account t on ab.account_code = t.account_code
        LEFT JOIN supplier_store s on ab.store_code = s.store_code
        LEFT JOIN merchant m on s.mer_code = m.mer_code
        LEFT JOIN order_info oi on oi.trans_no = ab.trans_no
        LEFT JOIN department d on d.department_code = t.department
        LEFT JOIN account_type aty on aty.type_code = t.account_type_code
        <where>
            <if test="orderPageQuery.accountName != null">
                and t.account_name = #{orderPageQuery.accountName}
            </if>
            <if test="orderPageQuery.storeList != null and orderPageQuery.storeList.size >0">
                <!--只有员工卡支付方式返利-->
                AND ab.store_code in
                <foreach collection="orderPageQuery.storeList" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="orderPageQuery.orderId != null">
                and oi.order_id = #{orderPageQuery.orderId}
            </if>
            <if test="orderPageQuery.paymentChannel != null">
                and ab.payment_channel = #{orderPageQuery.paymentChannel}
            </if>
            <if test="orderPageQuery.lowPrice != null">
                and ab.trans_amount &gt;= #{orderPageQuery.lowPrice}
            </if>
            <if test="orderPageQuery.highPrice != null">
                and ab.trans_amount &lt;= #{orderPageQuery.highPrice}
            </if>
            <if test="orderPageQuery.startDateTime != null">
                and trans_time &gt;= #{orderPageQuery.startDateTime}
            </if>
            <if test="orderPageQuery.endDateTime != null">
                and trans_time &lt;= #{orderPageQuery.endDateTime}
            </if>
            <if test="orderPageQuery.supplierMerCode != null">
                and m.mer_code = #{orderPageQuery.supplierMerCode}
            </if>
        </where>
        ) tt LEFT JOIN merchant mm
        on tt.accountMerCode = mm.mer_code
        <where>
            <if test="orderPageQuery.merchantCode != null">
                and tt.accountMerCode = #{orderPageQuery.merchantCode}
            </if>
            <if test="orderPageQuery.timeInterval != null">
                and tt.time_interval = #{orderPageQuery.timeInterval}
            </if>
            <if test="orderPageQuery.accountType != null">
                and tt.type_code = #{orderPageQuery.accountType}
            </if>
            <if test="orderPageQuery.organizationCode != null">
                and tt.department_code in (
                    select department_code from department
                    where department_code = #{orderPageQuery.organizationCode}
                    or department_parent = #{orderPageQuery.organizationCode}
                )
            </if>
        </where>
        order by tt.orderTime desc
    </select>

    <select id="searchOrderSum" parameterType="com.welfare.persist.dto.query.OrderPageQuery" resultType="com.welfare.persist.entity.OrderSummary">
        select sum(orderAmount) as orderAmount , sum(orderNum) as orderNum from (
            select case trans_type
            when "consume" then sum(trans_amount)
            else (-1) * sum(trans_amount)
            end
            as orderAmount,
            count(*) AS orderNum
            from (
            SELECT
                oi.order_id ,
                t.mer_code AS accountMerCode,
                t.account_code AS accountCode,
                t.account_name AS accountName,
                s.mer_code AS supplierMerCode,
                m.mer_name AS supplierMername,
                s.store_code AS storeCode,
                s.store_name AS sotreName,
                ab.trans_amount,
                ab.trans_type,
                oi.time_interval,
                t.account_type_code,
                d.department_code,
                d.department_name ,
                aty.type_code,
                aty.type_name
            FROM
            (select account_code,sum(trans_amount) as trans_amount ,payment_channel,
        trans_no , max(trans_time) as trans_time ,store_code,trans_type
        from account_bill_detail
        where trans_type in ('consume','refund')
        and order_channel = "SHOP_CONSUMPTION"
        group by trans_no , store_code , trans_type,account_code) ab
            LEFT JOIN account t on ab.account_code = t.account_code
            LEFT JOIN supplier_store s on ab.store_code = s.store_code
            LEFT JOIN merchant m on s.mer_code = m.mer_code
            LEFT JOIN order_info oi on oi.trans_no = ab.trans_no
            LEFT JOIN department d on d.department_code = t.department
            LEFT JOIN account_type aty on aty.type_code = t.account_type_code
            <where>
                <if test="orderPageQuery.accountName != null">
                    and t.account_name = #{orderPageQuery.accountName}
                </if>
                <if test="orderPageQuery.storeList != null and orderPageQuery.storeList.size >0">
                    <!--只有员工卡支付方式返利-->
                    AND ab.store_code in
                    <foreach collection="orderPageQuery.storeList" item="item" index="index" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="orderPageQuery.orderId != null">
                    and oi.order_id = #{orderPageQuery.orderId}
                </if>
                <if test="orderPageQuery.lowPrice != null">
                    and ab.trans_amount &gt;= #{orderPageQuery.lowPrice}
                </if>
                <if test="orderPageQuery.highPrice != null">
                    and ab.trans_amount &lt;= #{orderPageQuery.highPrice}
                </if>
                <if test="orderPageQuery.startDateTime != null">
                    and trans_time &gt;= #{orderPageQuery.startDateTime}
                </if>
                <if test="orderPageQuery.endDateTime != null">
                    and trans_time &lt;= #{orderPageQuery.endDateTime}
                </if>
                <if test="orderPageQuery.supplierMerCode != null">
                    and m.mer_code = #{orderPageQuery.supplierMerCode}
                </if>
                <if test="orderPageQuery.paymentChannel != null">
                    and ab.payment_channel = #{orderPageQuery.paymentChannel}
                </if>
            </where>
            ) tt LEFT JOIN merchant mm
            on tt.accountMerCode = mm.mer_code
            <where>
                <if test="orderPageQuery.merchantCode != null">
                    tt.accountMerCode = #{orderPageQuery.merchantCode}
                </if>
                <if test="orderPageQuery.timeInterval != null">
                    and tt.time_interval = #{orderPageQuery.timeInterval}
                </if>
                <if test="orderPageQuery.accountType != null">
                    and tt.type_code = #{orderPageQuery.accountType}
                </if>
                <if test="orderPageQuery.organizationCode != null">
                    and tt.department_code in (
                    select department_code from department
                    where department_code = #{orderPageQuery.organizationCode}
                    or department_parent = #{orderPageQuery.organizationCode}
                    )
                </if>
            </where>
            group by trans_type
        )t
    </select>

    <sql id="tableName">
        order_info
    </sql>

	<!--查询订单-->
    <sql id="baseColumn">
        id,order_id,goods,merchant_code,merchant_name,store_code,store_name,account_code,
        account_name,card_id,order_amount,order_time,pay_code,pay_name,trans_type,trans_type_name,
        create_user,create_time
    </sql>

    <insert id="saveOrUpdate" parameterType="list" >
        insert into <!--<include refid="tableName"/>-->
        order_info(order_id,trans_no , return_trans_no,goods,merchant_code,merchant_name,store_code,store_name,account_code,account_name,
        card_id,order_amount,order_time,pay_code,pay_name,trans_type , trans_type_name,create_user,create_time,time_interval)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.orderId},#{item.transNo},#{item.returnTransNo},#{item.goods},#{item.merchantCode},#{item.merchantName},#{item.storeCode},
            #{item.storeName},#{item.accountCode},#{item.accountName},#{item.cardId},
            #{item.orderAmount},#{item.orderTime},#{item.payCode},#{item.payName},
            #{item.transType},#{item.transTypeName},
            "system",now(),#{item.timeInterval}
            )
        </foreach>
        <!--ON DUPLICATE KEY UPDATE
        trans_no = values(trans_no),
        return_trans_no = values(return_trans_no),
        goods = values(goods),
        merchant_code = values(merchant_code),
        merchant_name =  values(merchant_name),
        store_code = values(store_code),
        store_name =  values(store_name),
        account_code = values(account_code),
        account_name =  values(account_name),
        card_id = values(card_id),
        order_amount =  values(order_amount),
        order_time =  values(order_time),
        pay_code =  values(pay_code),
        pay_name =  values(pay_name),
        trans_type = values(trans_type),
        trans_type_name = values(trans_type_name),
        update_user = values(update_user),
        update_time = values(update_time),
        time_interval = values(time_interval)-->
    </insert>

</mapper>